# Generated by Django 2.0.9 on 2018-10-07 20:46

import cards.models
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Association',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=250)),
                ('classification', models.CharField(max_length=60, null=True)),
                ('description', models.TextField(null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Association',
                'verbose_name_plural': 'Associations',
                'db_table': 'association',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AssociationCard',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('association', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cards.Association')),
            ],
            options={
                'db_table': 'associationcard',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='BaseCard',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, unique=True)),
                ('filing_name', models.CharField(max_length=128)),
                ('rules_text', models.CharField(blank=True, max_length=1000)),
                ('mana_cost', models.CharField(max_length=60)),
                ('cmc', models.IntegerField(default=0)),
                ('power', models.CharField(blank=True, max_length=4, null=True)),
                ('toughness', models.CharField(blank=True, max_length=4, null=True)),
                ('loyalty', models.CharField(blank=True, max_length=4, null=True)),
                ('ispermanent', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('cardposition', models.CharField(default='F', max_length=1)),
            ],
            options={
                'verbose_name_plural': 'Base Cards',
                'db_table': 'basecard',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Battle',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('battle_date', models.DateTimeField(auto_now_add=True)),
                ('session_key', models.CharField(max_length=40)),
            ],
            options={
                'verbose_name_plural': 'Battles',
                'db_table': 'battle',
            },
        ),
        migrations.CreateModel(
            name='Card',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('multiverseid', models.IntegerField(blank=True)),
                ('flavor_text', models.CharField(blank=True, max_length=1000, null=True)),
                ('card_number', models.CharField(blank=True, max_length=6, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('basecard', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cards.BaseCard')),
            ],
            options={
                'db_table': 'card',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CardColor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('basecard', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cards.BaseCard')),
            ],
            options={
                'db_table': 'cardcolor',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CardKeyword',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('keyword', models.CharField(max_length=60)),
                ('kwscore', models.FloatField()),
            ],
            options={
                'db_table': 'cardkeyword',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CardPrice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('at_datetime', models.DateTimeField(auto_now=True)),
                ('price', models.FloatField(default=0.0)),
                ('price_discounted', models.BooleanField(default=False)),
                ('printing', models.CharField(max_length=25)),
                ('card', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cards.Card')),
            ],
            options={
                'db_table': 'cardprice',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CardRating',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('mu', models.FloatField(default=25.0)),
                ('sigma', models.FloatField(default=8.333333333333334)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name_plural': 'Card Ratings',
                'db_table': 'cardrating',
            },
        ),
        migrations.CreateModel(
            name='CardSubtype',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('position', models.IntegerField()),
                ('basecard', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cards.BaseCard')),
            ],
            options={
                'db_table': 'cardsubtype',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CardSupertype',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('position', models.IntegerField()),
                ('basecard', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cards.BaseCard')),
            ],
            options={
                'db_table': 'cardsupertype',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CardType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('position', models.IntegerField()),
                ('basecard', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cards.BaseCard')),
            ],
            options={
                'db_table': 'cardtype',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Color',
            fields=[
                ('id', models.CharField(max_length=1, primary_key=True, serialize=False)),
                ('color', models.CharField(max_length=9)),
            ],
            options={
                'db_table': 'color',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ExpansionSet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, unique=True)),
                ('abbr', models.CharField(max_length=10)),
                ('releasedate', models.DateField(null=True)),
            ],
            options={
                'verbose_name_plural': 'Expansion Sets',
                'db_table': 'expansionset',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Format',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('formatname', models.CharField(max_length=60)),
                ('format', models.CharField(max_length=60, unique=True)),
                ('abbr', models.CharField(max_length=6, null=True)),
                ('min_cards_main', models.IntegerField(default=60)),
                ('max_cards_main', models.IntegerField(default=60)),
                ('min_cards_side', models.IntegerField(default=0)),
                ('max_cards_side', models.IntegerField(default=15)),
                ('max_nonbl_card_count', models.IntegerField(default=4)),
                ('uses_command_zone', models.BooleanField(default=False)),
                ('validator', models.CharField(blank=True, max_length=100, null=True)),
                ('start_date', models.DateField(null=True, validators=[cards.models.ddvalstart])),
                ('end_date', models.DateField(null=True)),
            ],
            options={
                'verbose_name_plural': 'Formats',
                'db_table': 'format',
            },
        ),
        migrations.CreateModel(
            name='FormatBannedCard',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('format', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cards.Format')),
            ],
            options={
                'verbose_name_plural': 'Format Banned Cards',
                'db_table': 'formatbannedcard',
            },
        ),
        migrations.CreateModel(
            name='FormatBasecard',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('basecard', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cards.BaseCard')),
                ('format', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cards.Format')),
            ],
            options={
                'verbose_name_plural': 'Format Base Cards',
                'db_table': 'formatbasecard',
            },
        ),
        migrations.CreateModel(
            name='FormatExpansionSet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('expansionset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cards.ExpansionSet')),
                ('format', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cards.Format')),
            ],
            options={
                'verbose_name_plural': 'Format Expansion Sets',
                'db_table': 'formatexpansionset',
            },
        ),
        migrations.CreateModel(
            name='Mark',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mark', models.CharField(max_length=128)),
            ],
            options={
                'db_table': 'mark',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='PhysicalCard',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('layout', models.CharField(choices=[('normal', 'normal'), ('split', 'split'), ('flip', 'flip'), ('aftermath', 'aftermath'), ('double-faced', 'double-faced'), ('token', 'token'), ('plane', 'plane'), ('scheme', 'scheme'), ('phenomenon', 'phenomenon'), ('leveler', 'leveler'), ('vanguard', 'vanguard')], default='normal', max_length=12)),
            ],
            options={
                'verbose_name': 'Physical Card',
                'verbose_name_plural': 'Physical Cards',
                'db_table': 'physicalcard',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Rarity',
            fields=[
                ('id', models.CharField(max_length=1, primary_key=True, serialize=False)),
                ('rarity', models.CharField(max_length=11)),
                ('sortorder', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'verbose_name_plural': 'Rarities',
                'db_table': 'rarity',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Ruling',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ruling_text', models.TextField()),
                ('ruling_date', models.DateField()),
                ('basecard', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cards.BaseCard')),
            ],
            options={
                'verbose_name_plural': 'Rulings',
                'db_table': 'ruling',
            },
        ),
        migrations.CreateModel(
            name='SimilarPhysicalCard',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.FloatField()),
                ('physicalcard', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='physicalcard', to='cards.PhysicalCard')),
                ('sim_physicalcard', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='simphysicalcard', to='cards.PhysicalCard')),
            ],
            options={
                'db_table': 'similarphysicalcard',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Subtype',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subtype', models.CharField(max_length=128, unique=True)),
            ],
            options={
                'db_table': 'subtype',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Supertype',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('supertype', models.CharField(max_length=128, unique=True)),
            ],
            options={
                'db_table': 'supertype',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Type',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(max_length=128, unique=True)),
                ('sort_order', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'type',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='formatbannedcard',
            name='physicalcard',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cards.PhysicalCard'),
        ),
        migrations.AddField(
            model_name='format',
            name='bannedcards',
            field=models.ManyToManyField(through='cards.FormatBannedCard', to='cards.PhysicalCard'),
        ),
        migrations.AddField(
            model_name='format',
            name='expansionsets',
            field=models.ManyToManyField(through='cards.FormatExpansionSet', to='cards.ExpansionSet'),
        ),
        migrations.AddField(
            model_name='cardtype',
            name='type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cards.Type'),
        ),
        migrations.AddField(
            model_name='cardsupertype',
            name='supertype',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cards.Supertype'),
        ),
        migrations.AddField(
            model_name='cardsubtype',
            name='subtype',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cards.Subtype'),
        ),
        migrations.AddField(
            model_name='cardrating',
            name='format',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cards.Format'),
        ),
        migrations.AddField(
            model_name='cardrating',
            name='physicalcard',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cards.PhysicalCard'),
        ),
        migrations.AddField(
            model_name='cardkeyword',
            name='physicalcard',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cards.PhysicalCard'),
        ),
        migrations.AddField(
            model_name='cardcolor',
            name='color',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cards.Color'),
        ),
        migrations.AddField(
            model_name='card',
            name='expansionset',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cards.ExpansionSet'),
        ),
        migrations.AddField(
            model_name='card',
            name='mark',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='cards.Mark'),
        ),
        migrations.AddField(
            model_name='card',
            name='rarity',
            field=models.ForeignKey(blank=True, db_column='rarity', null=True, on_delete=django.db.models.deletion.CASCADE, to='cards.Rarity'),
        ),
        migrations.AddField(
            model_name='battle',
            name='format',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cards.Format'),
        ),
        migrations.AddField(
            model_name='battle',
            name='loser_pcard',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lost_battles', to='cards.PhysicalCard'),
        ),
        migrations.AddField(
            model_name='battle',
            name='winner_pcard',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='won_battles', to='cards.PhysicalCard'),
        ),
        migrations.AddField(
            model_name='basecard',
            name='colors',
            field=models.ManyToManyField(through='cards.CardColor', to='cards.Color'),
        ),
        migrations.AddField(
            model_name='basecard',
            name='physicalcard',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cards.PhysicalCard'),
        ),
        migrations.AddField(
            model_name='basecard',
            name='subtypes',
            field=models.ManyToManyField(through='cards.CardSubtype', to='cards.Subtype'),
        ),
        migrations.AddField(
            model_name='basecard',
            name='supertypes',
            field=models.ManyToManyField(through='cards.CardSupertype', to='cards.Supertype'),
        ),
        migrations.AddField(
            model_name='basecard',
            name='types',
            field=models.ManyToManyField(through='cards.CardType', to='cards.Type'),
        ),
        migrations.AddField(
            model_name='associationcard',
            name='physicalcard',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assocphysicalcard', to='cards.PhysicalCard'),
        ),
        migrations.AddField(
            model_name='association',
            name='associationcards',
            field=models.ManyToManyField(through='cards.AssociationCard', to='cards.PhysicalCard'),
        ),
        migrations.AlterUniqueTogether(
            name='formatbasecard',
            unique_together={('format', 'basecard')},
        ),
        migrations.AlterUniqueTogether(
            name='cardtype',
            unique_together={('basecard', 'position')},
        ),
        migrations.AlterUniqueTogether(
            name='cardsupertype',
            unique_together={('basecard', 'position')},
        ),
        migrations.AlterUniqueTogether(
            name='cardsubtype',
            unique_together={('basecard', 'position')},
        ),
        migrations.AlterUniqueTogether(
            name='cardrating',
            unique_together={('physicalcard', 'format')},
        ),
        migrations.AlterUniqueTogether(
            name='cardcolor',
            unique_together={('basecard', 'color')},
        ),
        migrations.AlterUniqueTogether(
            name='card',
            unique_together={('expansionset', 'card_number', 'multiverseid')},
        ),
        migrations.AlterUniqueTogether(
            name='battle',
            unique_together={('format', 'winner_pcard', 'loser_pcard', 'session_key')},
        ),
        migrations.AlterUniqueTogether(
            name='basecard',
            unique_together={('physicalcard', 'cardposition')},
        ),
    ]
